// GENERATED CODE â€” DO NOT EDIT
use chrono::prelude::*;

{% for comp in component_types %}
#[derive(Debug, Clone)]
pub struct {{ comp.name }} {
    {%- for f in comp.fields %}
    pub {{ f.name }}: {{ f.type | rust_typemap }},
    {%- endfor %}
}

// Hecs automatically implements Component for Send + Sync + 'static types

impl {{ comp.name }} {
    pub const VERSION: i32 = {{ comp.version }};
}

{% endfor %}

/// Component registry for runtime introspection
pub struct ComponentRegistry;

impl ComponentRegistry {
    /// Get all component names and versions
    pub fn get_all_components() -> Vec<(&'static str, i32)> {
        vec![
            {%- for comp in component_types %}
            ("{{ comp.name }}", {{ comp.name }}::VERSION),
            {%- endfor %}
        ]
    }
    
    /// Get components affected by a specific law
    pub fn get_components_for_law(law_name: &str) -> Vec<&'static str> {
        let mut components = Vec::new();
        // Schema-based law component mapping
        {% for comp in component_types -%}
        {%- if comp.laws %}
        {% for law in comp.laws -%}
        if "{{ law }}" == law_name {
            components.push("{{ comp.name }}");
        }
        {% endfor -%}
        {% endif -%}
        {% endfor %}
        components
    }
} 