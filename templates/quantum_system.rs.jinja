// GENERATED CODE â€” DO NOT EDIT  
// Generated via Copier from cold path quantum law schemas
use hecs::World;
use serde::{Serialize, Deserialize};
use chrono::{DateTime, Utc};
use uuid::Uuid;
use std::collections::HashMap;

{% for law in quantum_laws %}
/// Redpanda event for {{ law.name }}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct {{ law.name | replace('_', '') | title }}Event {
    pub event_id: Uuid,
    pub timestamp: DateTime<Utc>,
    pub event_type: String,
    pub law_name: String,
    pub entity_id: Option<u32>,
    pub component_data: serde_json::Value,
    pub quantum_params: HashMap<String, f64>,
}

/// {{ law.description }}
pub fn {{ law.name }}_system(world: &mut World) -> Result<(), Box<dyn std::error::Error>> {
    let mut events = Vec::new();
    {%- for component in law.applies_to %}
    // Process {{ component }} entities - using manual serialization to avoid trait requirements
    for (entity, _component) in world.query::<&{{ component }}>().iter() {
        let event = {{ law.name | replace('_', '') | title }}Event {
            event_id: Uuid::new_v4(),
            timestamp: Utc::now(),
            event_type: "quantum_calculation_request".to_string(),
            law_name: "{{ law.name }}".to_string(),
            entity_id: Some(entity.to_bits().get() as u32),
            component_data: serde_json::json!({"component_type": "{{ component }}"}),
            quantum_params: get_{{ law.name }}_params(),
        };
        events.push(event);
    }
    {%- endfor %}
    
    emit_to_redpanda("{{ law.redpanda_events.topic }}", &events)?;
    Ok(())
}

fn get_{{ law.name }}_params() -> HashMap<String, f64> {
    let mut params = HashMap::new();
    {%- for key, value in law.quantum_model.items() %}
    {%- if value is number %}
    params.insert("{{ key }}".to_string(), {{ value }}.0);
    {%- endif %}
    {%- endfor %}
    params
}

{% endfor %}

fn emit_to_redpanda(topic: &str, events: &[impl Serialize]) -> Result<(), Box<dyn std::error::Error>> {
    for event in events {
        println!("ðŸ“¡ [{}] {}", topic, serde_json::to_string(event)?);
    }
    Ok(())
}

use crate::gen::components::*;
